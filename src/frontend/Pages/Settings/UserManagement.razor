@page "/Settings/User-Management"
@using Frontend.Components.Dialogs
@using MudBlazor.Extensions
@attribute [StreamRendering]
@inject IDialogService DialogService
@inject ILogger<UserManagement> Logger

<MudContainer>
    <MudText Typo="Typo.h4">User Management</MudText>
    @if (currentUser.IsAdmin)
    {
        <MudContainer Class="p-4" MaxWidth="MaxWidth.Large">
            <MudGrid Justify="Justify.FlexEnd" AlignItems="Center" Class="mb-4">
                <MudItem>
                    <MudButton Class="mud-theme-primary" Variant="Variant.Filled" OnClick="@AddnewUser">Add User</MudButton>
                </MudItem>
            </MudGrid>

            <MudTable Items="@dummyUsers" Class="mt-4">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                                       OnClick="@(() => EditUser(context))"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                       OnClick="@(() => DeleteUser(context))"/>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudContainer>
    }
    else
    {
        <p>Access denied!</p>
    }
</MudContainer>


@code {

    List<DummyUser> dummyUsers = new List<DummyUser>
    {
        new DummyUser { Name = "John Doe", IsAdmin = false },
        new DummyUser { Name = "Jane Smith", IsAdmin = true },
        new DummyUser { Name = "Alice Johnson", IsAdmin = false },
        new DummyUser { Name = "Bob Brown", IsAdmin = true },
    };

    DummyUser currentUser = new DummyUser { Name = "Jane Smith", IsAdmin = true };

    private async Task AddnewUser()
    {
        _ = AddDialog();
    }

    private async Task AddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddUserDialog>("Add new User", options);

        var result = await dialog.Result;

        if (result.Data != null)
        {
            Logger.LogInformation("is nimma null du spast");
            DummyUser user = result.Data.As<DummyUser>();
            dummyUsers.Add(user);
        }

        InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    private async Task EditUser(DummyUser user)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EditUserDialog>("Edit User", options);

        var result = await dialog.Result;

        var searched_user = dummyUsers.Where(u => user.Name == u.Name).FirstOrDefault();

        if (result.Data != null)
        {
            Logger.LogInformation("is nimma null du spast");
            DummyUser newUser = result.Data.As<DummyUser>();
            dialog.Close(DialogResult.Ok(newUser));
            searched_user.Name = newUser.Name;
            searched_user.IsAdmin = newUser.IsAdmin;
        }

        //dummyUsers.Add(new () {Name = "Test", IsAdmin = true});
        InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    public void DeleteUser(DummyUser user)
    {
        dummyUsers.Remove(user);
        StateHasChanged();
    }

}
