@page "/Settings/User-Management"
@using ApiSchema.Usermanagement
@using Frontend.Components.Dialogs
@using Frontend.Services
@attribute [StreamRendering]
@inject IDialogService DialogService
@inject ILogger<UserManagement> Logger
@inject ApiAccessor accessor
@inject NavigationManager nav

<h3>UserManagement</h3>

@if (UsersLoaded && ErrorMessage == "")
{
    <MudContainer Class="p-4" MaxWidth="MaxWidth.Large">
        <MudContainer Style="padding: 20px;">
            <MudGrid Justify="Justify.FlexEnd" AlignItems="Center">
                <MudItem>
                    <MudButton Class="mud-theme-primary" Variant="Variant.Filled" OnClick="@AddnewUser">Add</MudButton>
                </MudItem>
            </MudGrid>
        </MudContainer>

        <MudContainer Class="p-4">
            <MudTable Items="@Users" Class="mt-4">
                <HeaderContent>
                    <MudTh>Username</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Username</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                                       OnClick="@(() => EditUser(context))"/>
                        @if (context.Username != "admin" && context.Username != "Visitor")
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                           OnClick="@(() =>DeleteUser(context))"/>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudContainer>
    </MudContainer>

}

else if(ErrorMessage != "")
{
    <p>Access denied!</p>
    <p>Error: @ErrorMessage</p>
}
else
{
    <p>Loading...</p>
}



@code {
    private List<UsersModel> Users { get; set; } = new List<UsersModel>();
    private string? ErrorMessage { get; set; } = "";
    private bool UsersLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userResponse = await accessor.GetAllUsers();
        UsersLoaded = userResponse.Success;
        if (!userResponse.Success)
        {
            ErrorMessage = userResponse.Message;
            return;
        }

        Users = userResponse.Response!;

    }

    private async Task ReloadUsers()
    {
        var userResponse = await accessor.GetAllUsers();
        if (!userResponse.Success)
        {
            Console.WriteLine("User loading failed");
            UsersLoaded = userResponse.Success;
            ErrorMessage = userResponse.Message;
            return;
        }
        Users = userResponse.Response!;
        UsersLoaded = userResponse.Success;
        await InvokeAsync(StateHasChanged);
    }
    private async Task AddnewUser()
    {
        _ = AddDialog();
    }

    private async Task AddDialog()
    {

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddUserDialog>("Add new User", options);

        var result = await dialog.Result;

        if (result!.Data is null)
        {
            return;
        }

        await ReloadUsers();
        await InvokeAsync(StateHasChanged);
        StateHasChanged();

    }

    private async Task EditUser(UsersModel user)
    {
        string oldUsername = user.Username;
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var parameters = new DialogParameters()
        {
            {"User", user}
        };
        var dialog = await DialogService.ShowAsync<EditUserDialog>("Edit User", parameters, options);
        var result = await dialog.Result;


        if (result!.Data != null)
        {
            dialog.Close(DialogResult.Ok(user));
        }

        await ReloadUsers();
        await InvokeAsync(StateHasChanged);
    }

    public async Task DeleteUser(UsersModel user)
    {
        await accessor.DeleteUser(user.Username);
        await ReloadUsers();
        await InvokeAsync(StateHasChanged);
    }

}
