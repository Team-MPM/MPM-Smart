@page "/Settings/User-Management"
@using ApiSchema.Usermanagement
@using Frontend.Components.Dialogs
@using Frontend.Services
@using MudBlazor.Extensions
@attribute [StreamRendering]
@inject IDialogService DialogService
@inject ILogger<UserManagement> Logger
@inject ApiAccessor accessor

<h3>UserManagement</h3>

@if (UsersLoaded && ErrorMessage == "")
{
    <MudContainer Class="p-4" MaxWidth="MaxWidth.Large">
        <MudContainer Style="padding: 20px;">
            <MudGrid Justify="Justify.FlexEnd" AlignItems="Center">
                <MudItem>
                    <MudButton Class="mud-theme-primary" Variant="Variant.Filled" OnClick="@AddnewUser">Add</MudButton>
                </MudItem>
            </MudGrid>
        </MudContainer>

        <MudContainer Class="p-4">
            @foreach (var user in Users)
            {
                <MudCardContent>
                    <MudGrid Justify="Justify.SpaceBetween" AlignItems="Center">
                        <MudItem Color="" Style="display: flex; align-items: center; gap: 10px;">
                            <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-4">@user.Username</MudText>
                        </MudItem>
                        <MudItem Style="display: flex; justify-content: center; align-items: center; gap: 10px;">
                            <MudButton OnClick="() => EditUser(user)">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Style="cursor: pointer;"/>
                            </MudButton>
                            <MudButton @onclick="() => DeleteUser(user)">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Style="cursor: pointer;"/>
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            }
        </MudContainer>
    </MudContainer>

}

else if(ErrorMessage != "")
{
    <p>Access denied!</p>
    <p>Error: @ErrorMessage</p>
}
else
{
    <p>Loading...</p>
}



@code {
    private List<UsersModel> Users { get; set; } = new List<UsersModel>();
    private string? ErrorMessage { get; set; } = "";
    private bool UsersLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userResponse = await accessor.GetAllUsers();
        UsersLoaded = userResponse.Success;
        if (!userResponse.Success)
        {
            ErrorMessage = userResponse.Message;
            return;
        }

        Users = userResponse.Response!;

    }

    private async Task ReloadUsers()
    {
        var userResponse = await accessor.GetAllUsers();
        if (!userResponse.Success)
        {
            UsersLoaded = userResponse.Success;
            ErrorMessage = userResponse.Message;
            return;
        }
        Users = Users;
        UsersLoaded = userResponse.Success;
    }
    private async Task AddnewUser()
    {
        _ = AddDialog();
    }

    private async Task AddDialog()
    {

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddUserDialog>("Add new User", options);

        var result = await dialog.Result;

        if (result.Data is null)
        {
            return;
        }

        await InvokeAsync(StateHasChanged);
        StateHasChanged();

    }

    private async Task EditUser(UsersModel user)
    {
        string oldUsername = user.Username;
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var parameters = new DialogParameters()
        {
            {"User", user}
        };
        var dialog = await DialogService.ShowAsync<EditUserDialog>("Edit User", parameters, options);
        var result = await dialog.Result;


        if (result.Data != null)
        {
            Logger.LogInformation("is nimma null du spast");
            dialog.Close(DialogResult.Ok(user));
        }

        await InvokeAsync(StateHasChanged);
        await accessor.SetUsernameForUser(oldUsername, user.Username);
        await ReloadUsers();
    }

    public void DeleteUser(UsersModel user)
    {
        StateHasChanged();
    }

}
