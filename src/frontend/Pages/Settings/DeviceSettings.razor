@page "/settings/devices"
@using ApiSchema.Devices
@using ApiSchema.Plugins
@using Frontend.Components.Dialogs
@using Frontend.Services
@using Microsoft.AspNetCore.SignalR.Client

@inject ApiAccessor Api
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h4">Connected Devices</MudText>

    @if (m_Devices is null)
    {
        <MudProgressCircular Color="Color.Primary"/>
    }
    else
    {
        <MudTable Items="@m_Devices" Class="mt-4">
            <HeaderContent>
                <MudTh>Device Name</MudTh>
                <MudTh>Capabilities</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudTooltip Text="@context.Description">
                        @context.Name
                    </MudTooltip>
                </MudTd>
                <MudTd>
                    @foreach (var item in context.Capabilities)
                    {
                        <MudTooltip Text="@item.Value">
                            <MudChip T="string" Label="true" Text="@item.Key"
                                     Color="Color.Success"/>
                        </MudTooltip>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }

    @if (m_Error != null)
    {
        <MudText Typo="Typo.body1" Color="Color.Error">@m_Error</MudText>
    }
</MudContainer>

<div style="position: absolute; bottom: 20px; right: 20px;">
    <MudButton OnClick="OpenDeviceScanDialog" Color="Color.Primary" Variant="Variant.Filled">
        Add Device
    </MudButton>
</div>


@code {

    private List<DeviceInfoDto>? m_Devices;
    private HubConnection? m_Connection;
    private string? m_Error;

    protected override async Task OnInitializedAsync()
    {
        // var res = await Api.GetConnectedDevices();
        // if (res.Success)
        //     m_Devices = res.Response;
        // else
        //     m_Error = res.Message;
    }

    private async Task OpenDeviceScanDialog(MouseEventArgs obj)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullWidth = true,
            CloseButton = true,
            BackdropClick = true,
            MaxWidth = MaxWidth.Small
        };

        var dialog = await DialogService.ShowAsync<DeviceScanDialog>(null, options);
        var result = await dialog.Result;

        if (result?.Canceled is false)
        {
            // var res = await Api.GetConnectedDevices();
            // if (res.Success)
            //     m_Devices = res.Response;
            // else
            //     m_Error = res.Message;
        }
    }

}
