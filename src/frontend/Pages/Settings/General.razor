@page "/Settings/General"
@using System.Runtime.InteropServices.JavaScript
@using Frontend.Services
@layout MainLayout

@inject ApiAccessor accessor

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-6">

    <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-4">Allgemeine Einstellungen</MudText>

    <MudPaper Class="p-2 mb-4" Elevation="2">
        <MudStack Spacing="1" Row="true" AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
            <MudTextField Label="Systemname" Variant="Variant.Outlined" @bind-Value="systemname" FullWidth="true"/>
        </MudStack>
    </MudPaper>

    <MudPaper Class="p-2 mb-4" Elevation="2">
        <MudStack Spacing="1" Row="true" AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
            <MudSelect T="string" Label="Zeitzone auswählen" Variant="Variant.Outlined" @bind-Value="selectedTimeZone">
                @foreach (var timeZone in TimeZones)
                {
                    <MudSelectItem T="string" Value="timeZone">@timeZone</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </MudPaper>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" OnClick="SaveSettings">Einstellungen speichern</MudButton>

</MudContainer>
<div>@ErrorMessage</div>

@code {
    private string systemname = "Localhost";
    private string selectedTimeZone = "";
    private string originalSystemName = "";
    private string originalTimeZone = "";
    public string ErrorMessage = "";

    private List<string> TimeZones { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await accessor.GetTimeZones();
        if (response.Response is not null)
        {
            TimeZones = response.Response.Select(s => s.Key).ToList();
        }

        var response1 = await accessor.GetTimeZone();
        if (response1.Response is not null)
        {
            selectedTimeZone = response1.Response!;
            originalTimeZone = selectedTimeZone; 
        }

        var response2 = await accessor.GetSettings();
        if (response2.Response is not null)
        {
            systemname = response2.Response.SystemName;
            originalSystemName = systemname; 
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveSettings()
    {
        if (systemname != originalSystemName)
        {
            var systemNameResult = await accessor.SetSystemName(systemname);
            if (!systemNameResult.Success)
            {
                ErrorMessage = systemNameResult.Message!;
            }
            else
            {
                originalSystemName = systemname; 
            }
        }

        if (selectedTimeZone != originalTimeZone)
        {
            var timeZoneResult = await accessor.SetTimeZone(selectedTimeZone);
            if (!timeZoneResult.Success)
            {
                ErrorMessage = timeZoneResult.Message!;
            }
            else
            {
                originalTimeZone = selectedTimeZone; 
            }
        }
    }
}
