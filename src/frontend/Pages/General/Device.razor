@page "/device"
@using ApiSchema
@using Frontend.Services
@using Shared
@using Frontend.Components.Data
@inject IDialogService DialogService
@inject ApiAccessor Api
@inject NavigationManager Nav
@inject DataManager DataManager

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h4" Class="mb-3">
            Device: @Name
        </MudText>
    </MudItem>

    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" lg="8">
                        <MudText Typo="Typo.body1" Class="mb-2">
                            <span class="bold">Serial:</span> @Serial
                        </MudText>
                        @if (m_DeviceDto is not null)
                        {
                            <MudText Typo="Typo.body1" Class="mb-2">
                                <span class="bold">Type:</span> @m_DeviceDto.DeviceInfo.Type
                            </MudText>
                            <MudText Typo="Typo.body1" Class="mb-2">
                                <span class="bold">Location:</span> @m_DeviceDto.Location
                            </MudText>
                            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="mb-3">
                                    <MudIcon Style="font-size: 1rem"
                                             Icon="@Icons.Material.Filled.Circle"
                                             Color="@(GetStateColor(m_DeviceDto.State))"/>
                                    <MudText Typo="Typo.body1" Class="state-text">
                                        <span class="bold">State:</span> @m_DeviceDto.State
                                    </MudText>
                                </MudStack>
                                <MudChipSet T="string">
                                    @foreach (var item in m_DeviceDto.DeviceInfo.Capabilities)
                                    {
                                        <MudChip T="string" Label="true" Text="@item.Key" Color="Color.Success"/>
                                    }
                                </MudChipSet>
                            </MudHidden>
                        }
                    </MudItem>
                    <MudItem xs="12" md="4">
                        @if (m_DeviceDto is not null)
                        {
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="my-3">
                                    <MudIcon Style="font-size: 1rem"
                                             Icon="@Icons.Material.Filled.Circle"
                                             Color="@(GetStateColor(m_DeviceDto.State))"/>
                                    <MudText Typo="Typo.body1" Class="state-text">
                                        <span class="bold">State:</span> @m_DeviceDto.State
                                    </MudText>
                                </MudStack>
                                <MudChipSet T="string">
                                    @foreach (var item in m_DeviceDto.DeviceInfo.Capabilities)
                                    {
                                        <MudChip T="string" Label="true" Text="@item.Key" Color="Color.Success"/>
                                    }
                                </MudChipSet>
                            </MudHidden>
                        }
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    @foreach (var item in m_DataPoints ?? [])
    {
        if (DataTypeHelper.IsSeries(item.QueryType))
        {
            <MudItem xs="12" sm="6" md="4">
                <DataCell
                    T="ComboSeriesDataQueryResultDto"
                    DataPoint="item"
                    Query="new DataQueryDto(
                    Id: item.Id, 
                    Granularity: TimeSpan.FromMinutes(1), 
                    From: DateTime.UtcNow.AddHours(-1),
                    To: DateTime.UtcNow,
                    ComboOptions: [m_DeviceDto!.DeviceInfo.Serial], 
                    Filter: null)"/>
            </MudItem>
        }
        else
        {
            <MudItem xs="12" sm="6" md="4">
                <DataCell
                    T="ComboDataQueryResultDto"
                    DataPoint="item"
                    Query="new DataQueryDto(
                        Id: item.Id, 
                        Granularity: null, 
                        From: null,
                        To: null,
                        ComboOptions: [m_DeviceDto!.DeviceInfo.Serial], 
                        Filter: null)"/>
            </MudItem>
        }
    }
</MudGrid>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "name")]
    public string? Name { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "serial")]
    public string? Serial { get; set; }

    private DeviceDto? m_DeviceDto;
    private DataPointDto[]? m_DataPoints;

    protected override async Task OnInitializedAsync()
    {
        if (Serial is null)
        {
            Nav.NavigateTo("/error");
            return;
        }

        var res = await Api.GetDevice(Serial);
        m_DeviceDto = res is { Success: true, Response: not null } ? res.Response : null;

        if (m_DeviceDto is null)
        {
            Nav.NavigateTo("/error");
            return;
        }

        Name = m_DeviceDto.DeviceInfo.Name;

        var allDataPoints = await DataManager.GetDataPointsAsync();

        m_DataPoints = allDataPoints.Where(p =>
                DataTypeHelper.IsCombo(p.QueryType) && p.ComboOptions!.Contains(m_DeviceDto.DeviceInfo.Serial))
            .ToArray();
    }

    private Color GetStateColor(DeviceState state) =>
        state switch
        {
            DeviceState.Disconnected => Color.Warning,
            DeviceState.Connected => Color.Success,
            DeviceState.Disabled => Color.Dark,
            DeviceState.Error => Color.Error,
            DeviceState.Unauthorized => Color.Error,
            _ => throw new ArgumentOutOfRangeException(nameof(state), state, null)
        };

}
