// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelemetryPlugin.Data;

#nullable disable

namespace TelemetryPlugin.Migrations
{
    [DbContext(typeof(TelemetryDbContext))]
    partial class TelemetryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("TelemetryPlugin.Data.CounterMetricEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampEndUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStartUtc")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.ToTable("CounterMetricEntries", (string)null);
                });

            modelBuilder.Entity("TelemetryPlugin.Data.GaugeMetricEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampEndUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStartUtc")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.ToTable("GaugeMetricEntries", (string)null);
                });

            modelBuilder.Entity("TelemetryPlugin.Data.HistogramBucketMetricEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Bucket")
                        .HasColumnType("REAL");

                    b.Property<long>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampEndUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStartUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.ToTable("HistogramBucketMetricEntries", (string)null);
                });

            modelBuilder.Entity("TelemetryPlugin.Data.HistogramSumMetricEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Sum")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("TimeStampEndUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStartUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.ToTable("HistogramSumMetricEntries", (string)null);
                });

            modelBuilder.Entity("TelemetryPlugin.Data.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Metrics", (string)null);
                });

            modelBuilder.Entity("TelemetryPlugin.Data.CounterMetricEntry", b =>
                {
                    b.HasOne("TelemetryPlugin.Data.Metric", "Metric")
                        .WithMany("CounterEntries")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("TelemetryPlugin.Data.GaugeMetricEntry", b =>
                {
                    b.HasOne("TelemetryPlugin.Data.Metric", "Metric")
                        .WithMany("GaugeEntries")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("TelemetryPlugin.Data.HistogramBucketMetricEntry", b =>
                {
                    b.HasOne("TelemetryPlugin.Data.Metric", "Metric")
                        .WithMany("HistogramBucketEntries")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("TelemetryPlugin.Data.HistogramSumMetricEntry", b =>
                {
                    b.HasOne("TelemetryPlugin.Data.Metric", "Metric")
                        .WithMany("HistogramSumEntries")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("TelemetryPlugin.Data.Metric", b =>
                {
                    b.Navigation("CounterEntries");

                    b.Navigation("GaugeEntries");

                    b.Navigation("HistogramBucketEntries");

                    b.Navigation("HistogramSumEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
